{"ast":null,"code":"import API from './API';\nconst AdminService = {\n  registerUser: userData => {\n    const requestData = {\n      username: userData.username,\n      password1: userData.password1,\n      password2: userData.password2\n    };\n    return API.post('/profiles/auth/registration/', requestData).then(response => {\n      if (response.status === 204) {\n        console.log('사용자가 성공적으로 등록되었습니다.');\n      }\n    }).catch(error => {\n      if (error.response && error.response.data) {\n        if (error.response.data.username) {\n          throw new Error('유효하지 않은 사용자입니다.');\n        }\n        if (error.response.data.password1) {\n          throw new Error('비밀번호는 영어나 특수문자를 포함하여 8자 이상으로 만들어주세요.');\n        }\n        if (error.response.data.non_field_errors) {\n          throw new Error('입력한 비밀번호가 일치하지 않습니다.');\n        }\n      } else if (error.response) {\n        throw new Error('서버 오류가 발생했습니다.');\n      } else {\n        throw new Error(error.message);\n      }\n    });\n  },\n  checkUserName: userName => {\n    return API.post('/profiles/auth/check-username/', userName).then(response => {\n      return response;\n    }).catch(error => {\n      throw new Error('아이디는 3자 이상 30자 이하로 설정해주세요.');\n    });\n  },\n  login: userData => {\n    const requestData = {\n      username: userData.username,\n      password: userData.password\n    };\n    return API.post('/profiles/auth/login/', requestData).then(response => {\n      if (response.status === 200) {\n        // 성공코드 200\n        console.log('사용자가 성공적으로 로그인하였습니다.');\n        const token = response.data.key;\n        localStorage.setItem('authToken', token);\n      }\n    }).catch(error => {\n      if (error.response && error.response.data) {\n        throw new Error('아이디 또는 비밀번호가 올바르지 않습니다.');\n      } else if (error.response) {\n        throw new Error('서버 오류가 발생했습니다.');\n      } else {\n        throw new Error(error.message);\n      }\n    });\n  },\n  logout: () => {\n    return API.post('/profiles/auth/logout/').then(response => {\n      if (response.status === 200) {\n        // 성공코드 200\n        console.log('사용자가 성공적으로 로그아웃하였습니다.');\n        localStorage.removeItem('authToken'); // Remove the token from local storage\n      }\n    }).catch(error => {\n      throw new Error(error.message);\n    });\n  }\n};\nexport default AdminService;","map":{"version":3,"names":["API","AdminService","registerUser","userData","requestData","username","password1","password2","post","then","response","status","console","log","catch","error","data","Error","non_field_errors","message","checkUserName","userName","login","password","token","key","localStorage","setItem","logout","removeItem"],"sources":["/Users/jhkim/Desktop/NEXT/project/product-day/main/frontend/src/utils/AdminService.js"],"sourcesContent":["import API from './API';\n\nconst AdminService = {\n    registerUser: (userData) => {\n        const requestData = {\n            username: userData.username,\n            password1: userData.password1,\n            password2: userData.password2,\n        };\n\n        return API.post('/profiles/auth/registration/', requestData)\n            .then((response) => {\n                if (response.status === 204) {\n                    console.log('사용자가 성공적으로 등록되었습니다.');\n                }\n            })\n            .catch((error) => {\n                if (error.response && error.response.data) {\n                    if (error.response.data.username) {\n                        throw new Error('유효하지 않은 사용자입니다.');\n                    }\n                    if (error.response.data.password1) {\n                        throw new Error('비밀번호는 영어나 특수문자를 포함하여 8자 이상으로 만들어주세요.');\n                    }\n                    if (error.response.data.non_field_errors) {\n                        throw new Error('입력한 비밀번호가 일치하지 않습니다.');\n                    }\n                } else if (error.response) {\n                    throw new Error('서버 오류가 발생했습니다.');\n                } else {\n                    throw new Error(error.message);\n                }\n            });\n    },\n\n    checkUserName: (userName) => {\n        return API.post('/profiles/auth/check-username/', userName)\n            .then((response) => {\n                return response;\n            })\n            .catch((error) => {\n                throw new Error('아이디는 3자 이상 30자 이하로 설정해주세요.');\n            });\n    },\n\n    login: (userData) => {\n        const requestData = {\n            username: userData.username,\n            password: userData.password,\n        };\n\n        return API.post('/profiles/auth/login/', requestData)\n            .then((response) => {\n                if (response.status === 200) {\n                    // 성공코드 200\n                    console.log('사용자가 성공적으로 로그인하였습니다.');\n                    const token = response.data.key;\n                    localStorage.setItem('authToken', token);\n                }\n            })\n            .catch((error) => {\n                if (error.response && error.response.data) {\n                    throw new Error('아이디 또는 비밀번호가 올바르지 않습니다.');\n                } else if (error.response) {\n                    throw new Error('서버 오류가 발생했습니다.');\n                } else {\n                    throw new Error(error.message);\n                }\n            });\n    },\n\n    logout: () => {\n        return API.post('/profiles/auth/logout/')\n            .then((response) => {\n                if (response.status === 200) {\n                    // 성공코드 200\n                    console.log('사용자가 성공적으로 로그아웃하였습니다.');\n                    localStorage.removeItem('authToken'); // Remove the token from local storage\n                }\n            })\n            .catch((error) => {\n                throw new Error(error.message);\n            });\n    },\n};\n\nexport default AdminService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}